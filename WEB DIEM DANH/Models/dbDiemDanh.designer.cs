#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WEB_DIEM_DANH.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="DiemDanh")]
	public partial class dbDiemDanhDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCHITIETDANGNHAP(CHITIETDANGNHAP instance);
    partial void UpdateCHITIETDANGNHAP(CHITIETDANGNHAP instance);
    partial void DeleteCHITIETDANGNHAP(CHITIETDANGNHAP instance);
    partial void InsertSINHVIEN(SINHVIEN instance);
    partial void UpdateSINHVIEN(SINHVIEN instance);
    partial void DeleteSINHVIEN(SINHVIEN instance);
    partial void InsertDANGNHAP(DANGNHAP instance);
    partial void UpdateDANGNHAP(DANGNHAP instance);
    partial void DeleteDANGNHAP(DANGNHAP instance);
    partial void InsertDANHSACHLOP(DANHSACHLOP instance);
    partial void UpdateDANHSACHLOP(DANHSACHLOP instance);
    partial void DeleteDANHSACHLOP(DANHSACHLOP instance);
    partial void InsertDIEMDANHSV(DIEMDANHSV instance);
    partial void UpdateDIEMDANHSV(DIEMDANHSV instance);
    partial void DeleteDIEMDANHSV(DIEMDANHSV instance);
    partial void InsertGIANGVIEN(GIANGVIEN instance);
    partial void UpdateGIANGVIEN(GIANGVIEN instance);
    partial void DeleteGIANGVIEN(GIANGVIEN instance);
    partial void InsertHOCKY(HOCKY instance);
    partial void UpdateHOCKY(HOCKY instance);
    partial void DeleteHOCKY(HOCKY instance);
    partial void InsertLICHHOC(LICHHOC instance);
    partial void UpdateLICHHOC(LICHHOC instance);
    partial void DeleteLICHHOC(LICHHOC instance);
    partial void InsertLOPMONHOC(LOPMONHOC instance);
    partial void UpdateLOPMONHOC(LOPMONHOC instance);
    partial void DeleteLOPMONHOC(LOPMONHOC instance);
    partial void InsertLOPSINHVIEN(LOPSINHVIEN instance);
    partial void UpdateLOPSINHVIEN(LOPSINHVIEN instance);
    partial void DeleteLOPSINHVIEN(LOPSINHVIEN instance);
    partial void InsertMONHOC(MONHOC instance);
    partial void UpdateMONHOC(MONHOC instance);
    partial void DeleteMONHOC(MONHOC instance);
    partial void InsertNAMHOC(NAMHOC instance);
    partial void UpdateNAMHOC(NAMHOC instance);
    partial void DeleteNAMHOC(NAMHOC instance);
    partial void InsertPHANQUYEN(PHANQUYEN instance);
    partial void UpdatePHANQUYEN(PHANQUYEN instance);
    partial void DeletePHANQUYEN(PHANQUYEN instance);
    partial void InsertQUANTRIVIEN(QUANTRIVIEN instance);
    partial void UpdateQUANTRIVIEN(QUANTRIVIEN instance);
    partial void DeleteQUANTRIVIEN(QUANTRIVIEN instance);
    #endregion
		
		public dbDiemDanhDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["DiemDanhConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public dbDiemDanhDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dbDiemDanhDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dbDiemDanhDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dbDiemDanhDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<CHITIETDANGNHAP> CHITIETDANGNHAPs
		{
			get
			{
				return this.GetTable<CHITIETDANGNHAP>();
			}
		}
		
		public System.Data.Linq.Table<SINHVIEN> SINHVIENs
		{
			get
			{
				return this.GetTable<SINHVIEN>();
			}
		}
		
		public System.Data.Linq.Table<DANGNHAP> DANGNHAPs
		{
			get
			{
				return this.GetTable<DANGNHAP>();
			}
		}
		
		public System.Data.Linq.Table<DANHSACHLOP> DANHSACHLOPs
		{
			get
			{
				return this.GetTable<DANHSACHLOP>();
			}
		}
		
		public System.Data.Linq.Table<DIEMDANHSV> DIEMDANHSVs
		{
			get
			{
				return this.GetTable<DIEMDANHSV>();
			}
		}
		
		public System.Data.Linq.Table<GIANGVIEN> GIANGVIENs
		{
			get
			{
				return this.GetTable<GIANGVIEN>();
			}
		}
		
		public System.Data.Linq.Table<HOCKY> HOCKies
		{
			get
			{
				return this.GetTable<HOCKY>();
			}
		}
		
		public System.Data.Linq.Table<LICHHOC> LICHHOCs
		{
			get
			{
				return this.GetTable<LICHHOC>();
			}
		}
		
		public System.Data.Linq.Table<LOPMONHOC> LOPMONHOCs
		{
			get
			{
				return this.GetTable<LOPMONHOC>();
			}
		}
		
		public System.Data.Linq.Table<LOPSINHVIEN> LOPSINHVIENs
		{
			get
			{
				return this.GetTable<LOPSINHVIEN>();
			}
		}
		
		public System.Data.Linq.Table<MONHOC> MONHOCs
		{
			get
			{
				return this.GetTable<MONHOC>();
			}
		}
		
		public System.Data.Linq.Table<NAMHOC> NAMHOCs
		{
			get
			{
				return this.GetTable<NAMHOC>();
			}
		}
		
		public System.Data.Linq.Table<PHANQUYEN> PHANQUYENs
		{
			get
			{
				return this.GetTable<PHANQUYEN>();
			}
		}
		
		public System.Data.Linq.Table<QUANTRIVIEN> QUANTRIVIENs
		{
			get
			{
				return this.GetTable<QUANTRIVIEN>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CHITIETDANGNHAP")]
	public partial class CHITIETDANGNHAP : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDPHANQUYEN;
		
		private int _IDDANGNHAP;
		
		private System.DateTime _THOIGIANDANGNHAP;
		
		private EntitySet<SINHVIEN> _SINHVIENs;
		
		private EntitySet<GIANGVIEN> _GIANGVIENs;
		
		private EntitySet<QUANTRIVIEN> _QUANTRIVIENs;
		
		private EntityRef<DANGNHAP> _DANGNHAP;
		
		private EntityRef<PHANQUYEN> _PHANQUYEN;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDPHANQUYENChanging(int value);
    partial void OnIDPHANQUYENChanged();
    partial void OnIDDANGNHAPChanging(int value);
    partial void OnIDDANGNHAPChanged();
    partial void OnTHOIGIANDANGNHAPChanging(System.DateTime value);
    partial void OnTHOIGIANDANGNHAPChanged();
    #endregion
		
		public CHITIETDANGNHAP()
		{
			this._SINHVIENs = new EntitySet<SINHVIEN>(new Action<SINHVIEN>(this.attach_SINHVIENs), new Action<SINHVIEN>(this.detach_SINHVIENs));
			this._GIANGVIENs = new EntitySet<GIANGVIEN>(new Action<GIANGVIEN>(this.attach_GIANGVIENs), new Action<GIANGVIEN>(this.detach_GIANGVIENs));
			this._QUANTRIVIENs = new EntitySet<QUANTRIVIEN>(new Action<QUANTRIVIEN>(this.attach_QUANTRIVIENs), new Action<QUANTRIVIEN>(this.detach_QUANTRIVIENs));
			this._DANGNHAP = default(EntityRef<DANGNHAP>);
			this._PHANQUYEN = default(EntityRef<PHANQUYEN>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDPHANQUYEN", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IDPHANQUYEN
		{
			get
			{
				return this._IDPHANQUYEN;
			}
			set
			{
				if ((this._IDPHANQUYEN != value))
				{
					if (this._PHANQUYEN.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDPHANQUYENChanging(value);
					this.SendPropertyChanging();
					this._IDPHANQUYEN = value;
					this.SendPropertyChanged("IDPHANQUYEN");
					this.OnIDPHANQUYENChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDDANGNHAP", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IDDANGNHAP
		{
			get
			{
				return this._IDDANGNHAP;
			}
			set
			{
				if ((this._IDDANGNHAP != value))
				{
					if (this._DANGNHAP.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDDANGNHAPChanging(value);
					this.SendPropertyChanging();
					this._IDDANGNHAP = value;
					this.SendPropertyChanged("IDDANGNHAP");
					this.OnIDDANGNHAPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_THOIGIANDANGNHAP", DbType="DateTime NOT NULL")]
		public System.DateTime THOIGIANDANGNHAP
		{
			get
			{
				return this._THOIGIANDANGNHAP;
			}
			set
			{
				if ((this._THOIGIANDANGNHAP != value))
				{
					this.OnTHOIGIANDANGNHAPChanging(value);
					this.SendPropertyChanging();
					this._THOIGIANDANGNHAP = value;
					this.SendPropertyChanged("THOIGIANDANGNHAP");
					this.OnTHOIGIANDANGNHAPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CHITIETDANGNHAP_SINHVIEN", Storage="_SINHVIENs", ThisKey="IDPHANQUYEN,IDDANGNHAP", OtherKey="IDPHANQUYEN,IDDANGNHAP")]
		public EntitySet<SINHVIEN> SINHVIENs
		{
			get
			{
				return this._SINHVIENs;
			}
			set
			{
				this._SINHVIENs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CHITIETDANGNHAP_GIANGVIEN", Storage="_GIANGVIENs", ThisKey="IDPHANQUYEN,IDDANGNHAP", OtherKey="IDPHANQUYEN,IDDANGNHAP")]
		public EntitySet<GIANGVIEN> GIANGVIENs
		{
			get
			{
				return this._GIANGVIENs;
			}
			set
			{
				this._GIANGVIENs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CHITIETDANGNHAP_QUANTRIVIEN", Storage="_QUANTRIVIENs", ThisKey="IDPHANQUYEN,IDDANGNHAP", OtherKey="IDPHANQUYEN,IDDANGNHAP")]
		public EntitySet<QUANTRIVIEN> QUANTRIVIENs
		{
			get
			{
				return this._QUANTRIVIENs;
			}
			set
			{
				this._QUANTRIVIENs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DANGNHAP_CHITIETDANGNHAP", Storage="_DANGNHAP", ThisKey="IDDANGNHAP", OtherKey="IDDANGNHAP", IsForeignKey=true)]
		public DANGNHAP DANGNHAP
		{
			get
			{
				return this._DANGNHAP.Entity;
			}
			set
			{
				DANGNHAP previousValue = this._DANGNHAP.Entity;
				if (((previousValue != value) 
							|| (this._DANGNHAP.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DANGNHAP.Entity = null;
						previousValue.CHITIETDANGNHAPs.Remove(this);
					}
					this._DANGNHAP.Entity = value;
					if ((value != null))
					{
						value.CHITIETDANGNHAPs.Add(this);
						this._IDDANGNHAP = value.IDDANGNHAP;
					}
					else
					{
						this._IDDANGNHAP = default(int);
					}
					this.SendPropertyChanged("DANGNHAP");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PHANQUYEN_CHITIETDANGNHAP", Storage="_PHANQUYEN", ThisKey="IDPHANQUYEN", OtherKey="IDPHANQUYEN", IsForeignKey=true)]
		public PHANQUYEN PHANQUYEN
		{
			get
			{
				return this._PHANQUYEN.Entity;
			}
			set
			{
				PHANQUYEN previousValue = this._PHANQUYEN.Entity;
				if (((previousValue != value) 
							|| (this._PHANQUYEN.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PHANQUYEN.Entity = null;
						previousValue.CHITIETDANGNHAPs.Remove(this);
					}
					this._PHANQUYEN.Entity = value;
					if ((value != null))
					{
						value.CHITIETDANGNHAPs.Add(this);
						this._IDPHANQUYEN = value.IDPHANQUYEN;
					}
					else
					{
						this._IDPHANQUYEN = default(int);
					}
					this.SendPropertyChanged("PHANQUYEN");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SINHVIENs(SINHVIEN entity)
		{
			this.SendPropertyChanging();
			entity.CHITIETDANGNHAP = this;
		}
		
		private void detach_SINHVIENs(SINHVIEN entity)
		{
			this.SendPropertyChanging();
			entity.CHITIETDANGNHAP = null;
		}
		
		private void attach_GIANGVIENs(GIANGVIEN entity)
		{
			this.SendPropertyChanging();
			entity.CHITIETDANGNHAP = this;
		}
		
		private void detach_GIANGVIENs(GIANGVIEN entity)
		{
			this.SendPropertyChanging();
			entity.CHITIETDANGNHAP = null;
		}
		
		private void attach_QUANTRIVIENs(QUANTRIVIEN entity)
		{
			this.SendPropertyChanging();
			entity.CHITIETDANGNHAP = this;
		}
		
		private void detach_QUANTRIVIENs(QUANTRIVIEN entity)
		{
			this.SendPropertyChanging();
			entity.CHITIETDANGNHAP = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SINHVIEN")]
	public partial class SINHVIEN : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDSINHVIEN;
		
		private string _MASOSINHVIEN;
		
		private string _TENSINHVIEN;
		
		private System.Nullable<System.DateTime> _NGAYSINH;
		
		private string _EMAIL;
		
		private string _SODIENTHOAI;
		
		private string _DIACHI;
		
		private int _IDLOPSINHVIEN;
		
		private int _IDPHANQUYEN;
		
		private int _IDDANGNHAP;
		
		private EntitySet<DANHSACHLOP> _DANHSACHLOPs;
		
		private EntityRef<CHITIETDANGNHAP> _CHITIETDANGNHAP;
		
		private EntityRef<LOPSINHVIEN> _LOPSINHVIEN;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDSINHVIENChanging(int value);
    partial void OnIDSINHVIENChanged();
    partial void OnMASOSINHVIENChanging(string value);
    partial void OnMASOSINHVIENChanged();
    partial void OnTENSINHVIENChanging(string value);
    partial void OnTENSINHVIENChanged();
    partial void OnNGAYSINHChanging(System.Nullable<System.DateTime> value);
    partial void OnNGAYSINHChanged();
    partial void OnEMAILChanging(string value);
    partial void OnEMAILChanged();
    partial void OnSODIENTHOAIChanging(string value);
    partial void OnSODIENTHOAIChanged();
    partial void OnDIACHIChanging(string value);
    partial void OnDIACHIChanged();
    partial void OnIDLOPSINHVIENChanging(int value);
    partial void OnIDLOPSINHVIENChanged();
    partial void OnIDPHANQUYENChanging(int value);
    partial void OnIDPHANQUYENChanged();
    partial void OnIDDANGNHAPChanging(int value);
    partial void OnIDDANGNHAPChanged();
    #endregion
		
		public SINHVIEN()
		{
			this._DANHSACHLOPs = new EntitySet<DANHSACHLOP>(new Action<DANHSACHLOP>(this.attach_DANHSACHLOPs), new Action<DANHSACHLOP>(this.detach_DANHSACHLOPs));
			this._CHITIETDANGNHAP = default(EntityRef<CHITIETDANGNHAP>);
			this._LOPSINHVIEN = default(EntityRef<LOPSINHVIEN>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDSINHVIEN", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDSINHVIEN
		{
			get
			{
				return this._IDSINHVIEN;
			}
			set
			{
				if ((this._IDSINHVIEN != value))
				{
					this.OnIDSINHVIENChanging(value);
					this.SendPropertyChanging();
					this._IDSINHVIEN = value;
					this.SendPropertyChanged("IDSINHVIEN");
					this.OnIDSINHVIENChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MASOSINHVIEN", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string MASOSINHVIEN
		{
			get
			{
				return this._MASOSINHVIEN;
			}
			set
			{
				if ((this._MASOSINHVIEN != value))
				{
					this.OnMASOSINHVIENChanging(value);
					this.SendPropertyChanging();
					this._MASOSINHVIEN = value;
					this.SendPropertyChanged("MASOSINHVIEN");
					this.OnMASOSINHVIENChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TENSINHVIEN", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string TENSINHVIEN
		{
			get
			{
				return this._TENSINHVIEN;
			}
			set
			{
				if ((this._TENSINHVIEN != value))
				{
					this.OnTENSINHVIENChanging(value);
					this.SendPropertyChanging();
					this._TENSINHVIEN = value;
					this.SendPropertyChanged("TENSINHVIEN");
					this.OnTENSINHVIENChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NGAYSINH", DbType="DateTime")]
		public System.Nullable<System.DateTime> NGAYSINH
		{
			get
			{
				return this._NGAYSINH;
			}
			set
			{
				if ((this._NGAYSINH != value))
				{
					this.OnNGAYSINHChanging(value);
					this.SendPropertyChanging();
					this._NGAYSINH = value;
					this.SendPropertyChanged("NGAYSINH");
					this.OnNGAYSINHChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EMAIL", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string EMAIL
		{
			get
			{
				return this._EMAIL;
			}
			set
			{
				if ((this._EMAIL != value))
				{
					this.OnEMAILChanging(value);
					this.SendPropertyChanging();
					this._EMAIL = value;
					this.SendPropertyChanged("EMAIL");
					this.OnEMAILChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SODIENTHOAI", DbType="VarChar(10)")]
		public string SODIENTHOAI
		{
			get
			{
				return this._SODIENTHOAI;
			}
			set
			{
				if ((this._SODIENTHOAI != value))
				{
					this.OnSODIENTHOAIChanging(value);
					this.SendPropertyChanging();
					this._SODIENTHOAI = value;
					this.SendPropertyChanged("SODIENTHOAI");
					this.OnSODIENTHOAIChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DIACHI", DbType="NVarChar(1)")]
		public string DIACHI
		{
			get
			{
				return this._DIACHI;
			}
			set
			{
				if ((this._DIACHI != value))
				{
					this.OnDIACHIChanging(value);
					this.SendPropertyChanging();
					this._DIACHI = value;
					this.SendPropertyChanged("DIACHI");
					this.OnDIACHIChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDLOPSINHVIEN", DbType="Int NOT NULL")]
		public int IDLOPSINHVIEN
		{
			get
			{
				return this._IDLOPSINHVIEN;
			}
			set
			{
				if ((this._IDLOPSINHVIEN != value))
				{
					if (this._LOPSINHVIEN.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDLOPSINHVIENChanging(value);
					this.SendPropertyChanging();
					this._IDLOPSINHVIEN = value;
					this.SendPropertyChanged("IDLOPSINHVIEN");
					this.OnIDLOPSINHVIENChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDPHANQUYEN", DbType="Int NOT NULL")]
		public int IDPHANQUYEN
		{
			get
			{
				return this._IDPHANQUYEN;
			}
			set
			{
				if ((this._IDPHANQUYEN != value))
				{
					if (this._CHITIETDANGNHAP.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDPHANQUYENChanging(value);
					this.SendPropertyChanging();
					this._IDPHANQUYEN = value;
					this.SendPropertyChanged("IDPHANQUYEN");
					this.OnIDPHANQUYENChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDDANGNHAP", DbType="Int NOT NULL")]
		public int IDDANGNHAP
		{
			get
			{
				return this._IDDANGNHAP;
			}
			set
			{
				if ((this._IDDANGNHAP != value))
				{
					if (this._CHITIETDANGNHAP.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDDANGNHAPChanging(value);
					this.SendPropertyChanging();
					this._IDDANGNHAP = value;
					this.SendPropertyChanged("IDDANGNHAP");
					this.OnIDDANGNHAPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SINHVIEN_DANHSACHLOP", Storage="_DANHSACHLOPs", ThisKey="IDSINHVIEN", OtherKey="IDSINHVIEN")]
		public EntitySet<DANHSACHLOP> DANHSACHLOPs
		{
			get
			{
				return this._DANHSACHLOPs;
			}
			set
			{
				this._DANHSACHLOPs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CHITIETDANGNHAP_SINHVIEN", Storage="_CHITIETDANGNHAP", ThisKey="IDPHANQUYEN,IDDANGNHAP", OtherKey="IDPHANQUYEN,IDDANGNHAP", IsForeignKey=true)]
		public CHITIETDANGNHAP CHITIETDANGNHAP
		{
			get
			{
				return this._CHITIETDANGNHAP.Entity;
			}
			set
			{
				CHITIETDANGNHAP previousValue = this._CHITIETDANGNHAP.Entity;
				if (((previousValue != value) 
							|| (this._CHITIETDANGNHAP.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CHITIETDANGNHAP.Entity = null;
						previousValue.SINHVIENs.Remove(this);
					}
					this._CHITIETDANGNHAP.Entity = value;
					if ((value != null))
					{
						value.SINHVIENs.Add(this);
						this._IDPHANQUYEN = value.IDPHANQUYEN;
						this._IDDANGNHAP = value.IDDANGNHAP;
					}
					else
					{
						this._IDPHANQUYEN = default(int);
						this._IDDANGNHAP = default(int);
					}
					this.SendPropertyChanged("CHITIETDANGNHAP");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LOPSINHVIEN_SINHVIEN", Storage="_LOPSINHVIEN", ThisKey="IDLOPSINHVIEN", OtherKey="IDLOPSINHVIEN", IsForeignKey=true)]
		public LOPSINHVIEN LOPSINHVIEN
		{
			get
			{
				return this._LOPSINHVIEN.Entity;
			}
			set
			{
				LOPSINHVIEN previousValue = this._LOPSINHVIEN.Entity;
				if (((previousValue != value) 
							|| (this._LOPSINHVIEN.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LOPSINHVIEN.Entity = null;
						previousValue.SINHVIENs.Remove(this);
					}
					this._LOPSINHVIEN.Entity = value;
					if ((value != null))
					{
						value.SINHVIENs.Add(this);
						this._IDLOPSINHVIEN = value.IDLOPSINHVIEN;
					}
					else
					{
						this._IDLOPSINHVIEN = default(int);
					}
					this.SendPropertyChanged("LOPSINHVIEN");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DANHSACHLOPs(DANHSACHLOP entity)
		{
			this.SendPropertyChanging();
			entity.SINHVIEN = this;
		}
		
		private void detach_DANHSACHLOPs(DANHSACHLOP entity)
		{
			this.SendPropertyChanging();
			entity.SINHVIEN = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DANGNHAP")]
	public partial class DANGNHAP : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDDANGNHAP;
		
		private System.Nullable<int> _IDPHANQUYEN;
		
		private string _TENDANGNHAP;
		
		private string _MATKHAU;
		
		private EntitySet<CHITIETDANGNHAP> _CHITIETDANGNHAPs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDDANGNHAPChanging(int value);
    partial void OnIDDANGNHAPChanged();
    partial void OnIDPHANQUYENChanging(System.Nullable<int> value);
    partial void OnIDPHANQUYENChanged();
    partial void OnTENDANGNHAPChanging(string value);
    partial void OnTENDANGNHAPChanged();
    partial void OnMATKHAUChanging(string value);
    partial void OnMATKHAUChanged();
    #endregion
		
		public DANGNHAP()
		{
			this._CHITIETDANGNHAPs = new EntitySet<CHITIETDANGNHAP>(new Action<CHITIETDANGNHAP>(this.attach_CHITIETDANGNHAPs), new Action<CHITIETDANGNHAP>(this.detach_CHITIETDANGNHAPs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDDANGNHAP", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDDANGNHAP
		{
			get
			{
				return this._IDDANGNHAP;
			}
			set
			{
				if ((this._IDDANGNHAP != value))
				{
					this.OnIDDANGNHAPChanging(value);
					this.SendPropertyChanging();
					this._IDDANGNHAP = value;
					this.SendPropertyChanged("IDDANGNHAP");
					this.OnIDDANGNHAPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDPHANQUYEN", DbType="Int")]
		public System.Nullable<int> IDPHANQUYEN
		{
			get
			{
				return this._IDPHANQUYEN;
			}
			set
			{
				if ((this._IDPHANQUYEN != value))
				{
					this.OnIDPHANQUYENChanging(value);
					this.SendPropertyChanging();
					this._IDPHANQUYEN = value;
					this.SendPropertyChanged("IDPHANQUYEN");
					this.OnIDPHANQUYENChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TENDANGNHAP", DbType="Char(50)")]
		public string TENDANGNHAP
		{
			get
			{
				return this._TENDANGNHAP;
			}
			set
			{
				if ((this._TENDANGNHAP != value))
				{
					this.OnTENDANGNHAPChanging(value);
					this.SendPropertyChanging();
					this._TENDANGNHAP = value;
					this.SendPropertyChanged("TENDANGNHAP");
					this.OnTENDANGNHAPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MATKHAU", DbType="Char(50)")]
		public string MATKHAU
		{
			get
			{
				return this._MATKHAU;
			}
			set
			{
				if ((this._MATKHAU != value))
				{
					this.OnMATKHAUChanging(value);
					this.SendPropertyChanging();
					this._MATKHAU = value;
					this.SendPropertyChanged("MATKHAU");
					this.OnMATKHAUChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DANGNHAP_CHITIETDANGNHAP", Storage="_CHITIETDANGNHAPs", ThisKey="IDDANGNHAP", OtherKey="IDDANGNHAP")]
		public EntitySet<CHITIETDANGNHAP> CHITIETDANGNHAPs
		{
			get
			{
				return this._CHITIETDANGNHAPs;
			}
			set
			{
				this._CHITIETDANGNHAPs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CHITIETDANGNHAPs(CHITIETDANGNHAP entity)
		{
			this.SendPropertyChanging();
			entity.DANGNHAP = this;
		}
		
		private void detach_CHITIETDANGNHAPs(CHITIETDANGNHAP entity)
		{
			this.SendPropertyChanging();
			entity.DANGNHAP = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DANHSACHLOP")]
	public partial class DANHSACHLOP : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDLOPMH;
		
		private int _IDSINHVIEN;
		
		private EntitySet<LICHHOC> _LICHHOCs;
		
		private EntityRef<SINHVIEN> _SINHVIEN;
		
		private EntityRef<LOPMONHOC> _LOPMONHOC;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDLOPMHChanging(int value);
    partial void OnIDLOPMHChanged();
    partial void OnIDSINHVIENChanging(int value);
    partial void OnIDSINHVIENChanged();
    #endregion
		
		public DANHSACHLOP()
		{
			this._LICHHOCs = new EntitySet<LICHHOC>(new Action<LICHHOC>(this.attach_LICHHOCs), new Action<LICHHOC>(this.detach_LICHHOCs));
			this._SINHVIEN = default(EntityRef<SINHVIEN>);
			this._LOPMONHOC = default(EntityRef<LOPMONHOC>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDLOPMH", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IDLOPMH
		{
			get
			{
				return this._IDLOPMH;
			}
			set
			{
				if ((this._IDLOPMH != value))
				{
					if (this._LOPMONHOC.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDLOPMHChanging(value);
					this.SendPropertyChanging();
					this._IDLOPMH = value;
					this.SendPropertyChanged("IDLOPMH");
					this.OnIDLOPMHChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDSINHVIEN", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IDSINHVIEN
		{
			get
			{
				return this._IDSINHVIEN;
			}
			set
			{
				if ((this._IDSINHVIEN != value))
				{
					if (this._SINHVIEN.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDSINHVIENChanging(value);
					this.SendPropertyChanging();
					this._IDSINHVIEN = value;
					this.SendPropertyChanged("IDSINHVIEN");
					this.OnIDSINHVIENChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DANHSACHLOP_LICHHOC", Storage="_LICHHOCs", ThisKey="IDLOPMH,IDSINHVIEN", OtherKey="IDLOPMH,IDSINHVIEN")]
		public EntitySet<LICHHOC> LICHHOCs
		{
			get
			{
				return this._LICHHOCs;
			}
			set
			{
				this._LICHHOCs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SINHVIEN_DANHSACHLOP", Storage="_SINHVIEN", ThisKey="IDSINHVIEN", OtherKey="IDSINHVIEN", IsForeignKey=true)]
		public SINHVIEN SINHVIEN
		{
			get
			{
				return this._SINHVIEN.Entity;
			}
			set
			{
				SINHVIEN previousValue = this._SINHVIEN.Entity;
				if (((previousValue != value) 
							|| (this._SINHVIEN.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SINHVIEN.Entity = null;
						previousValue.DANHSACHLOPs.Remove(this);
					}
					this._SINHVIEN.Entity = value;
					if ((value != null))
					{
						value.DANHSACHLOPs.Add(this);
						this._IDSINHVIEN = value.IDSINHVIEN;
					}
					else
					{
						this._IDSINHVIEN = default(int);
					}
					this.SendPropertyChanged("SINHVIEN");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LOPMONHOC_DANHSACHLOP", Storage="_LOPMONHOC", ThisKey="IDLOPMH", OtherKey="IDLOPMH", IsForeignKey=true)]
		public LOPMONHOC LOPMONHOC
		{
			get
			{
				return this._LOPMONHOC.Entity;
			}
			set
			{
				LOPMONHOC previousValue = this._LOPMONHOC.Entity;
				if (((previousValue != value) 
							|| (this._LOPMONHOC.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LOPMONHOC.Entity = null;
						previousValue.DANHSACHLOPs.Remove(this);
					}
					this._LOPMONHOC.Entity = value;
					if ((value != null))
					{
						value.DANHSACHLOPs.Add(this);
						this._IDLOPMH = value.IDLOPMH;
					}
					else
					{
						this._IDLOPMH = default(int);
					}
					this.SendPropertyChanged("LOPMONHOC");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LICHHOCs(LICHHOC entity)
		{
			this.SendPropertyChanging();
			entity.DANHSACHLOP = this;
		}
		
		private void detach_LICHHOCs(LICHHOC entity)
		{
			this.SendPropertyChanging();
			entity.DANHSACHLOP = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DIEMDANHSV")]
	public partial class DIEMDANHSV : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDDDSV;
		
		private System.DateTime _THOIGIANDDSV;
		
		private string _GHICHU;
		
		private int _IDLICHHOC;
		
		private int _IDLOPMH;
		
		private int _IDSINHVIEN;
		
		private EntityRef<LICHHOC> _LICHHOC;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDDDSVChanging(int value);
    partial void OnIDDDSVChanged();
    partial void OnTHOIGIANDDSVChanging(System.DateTime value);
    partial void OnTHOIGIANDDSVChanged();
    partial void OnGHICHUChanging(string value);
    partial void OnGHICHUChanged();
    partial void OnIDLICHHOCChanging(int value);
    partial void OnIDLICHHOCChanged();
    partial void OnIDLOPMHChanging(int value);
    partial void OnIDLOPMHChanged();
    partial void OnIDSINHVIENChanging(int value);
    partial void OnIDSINHVIENChanged();
    #endregion
		
		public DIEMDANHSV()
		{
			this._LICHHOC = default(EntityRef<LICHHOC>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDDDSV", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDDDSV
		{
			get
			{
				return this._IDDDSV;
			}
			set
			{
				if ((this._IDDDSV != value))
				{
					this.OnIDDDSVChanging(value);
					this.SendPropertyChanging();
					this._IDDDSV = value;
					this.SendPropertyChanged("IDDDSV");
					this.OnIDDDSVChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_THOIGIANDDSV", DbType="DateTime NOT NULL")]
		public System.DateTime THOIGIANDDSV
		{
			get
			{
				return this._THOIGIANDDSV;
			}
			set
			{
				if ((this._THOIGIANDDSV != value))
				{
					this.OnTHOIGIANDDSVChanging(value);
					this.SendPropertyChanging();
					this._THOIGIANDDSV = value;
					this.SendPropertyChanged("THOIGIANDDSV");
					this.OnTHOIGIANDDSVChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GHICHU", DbType="NVarChar(255)")]
		public string GHICHU
		{
			get
			{
				return this._GHICHU;
			}
			set
			{
				if ((this._GHICHU != value))
				{
					this.OnGHICHUChanging(value);
					this.SendPropertyChanging();
					this._GHICHU = value;
					this.SendPropertyChanged("GHICHU");
					this.OnGHICHUChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDLICHHOC", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IDLICHHOC
		{
			get
			{
				return this._IDLICHHOC;
			}
			set
			{
				if ((this._IDLICHHOC != value))
				{
					if (this._LICHHOC.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDLICHHOCChanging(value);
					this.SendPropertyChanging();
					this._IDLICHHOC = value;
					this.SendPropertyChanged("IDLICHHOC");
					this.OnIDLICHHOCChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDLOPMH", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IDLOPMH
		{
			get
			{
				return this._IDLOPMH;
			}
			set
			{
				if ((this._IDLOPMH != value))
				{
					if (this._LICHHOC.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDLOPMHChanging(value);
					this.SendPropertyChanging();
					this._IDLOPMH = value;
					this.SendPropertyChanged("IDLOPMH");
					this.OnIDLOPMHChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDSINHVIEN", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IDSINHVIEN
		{
			get
			{
				return this._IDSINHVIEN;
			}
			set
			{
				if ((this._IDSINHVIEN != value))
				{
					if (this._LICHHOC.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDSINHVIENChanging(value);
					this.SendPropertyChanging();
					this._IDSINHVIEN = value;
					this.SendPropertyChanged("IDSINHVIEN");
					this.OnIDSINHVIENChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LICHHOC_DIEMDANHSV", Storage="_LICHHOC", ThisKey="IDLICHHOC,IDLOPMH,IDSINHVIEN", OtherKey="IDLICHHOC,IDLOPMH,IDSINHVIEN", IsForeignKey=true)]
		public LICHHOC LICHHOC
		{
			get
			{
				return this._LICHHOC.Entity;
			}
			set
			{
				LICHHOC previousValue = this._LICHHOC.Entity;
				if (((previousValue != value) 
							|| (this._LICHHOC.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LICHHOC.Entity = null;
						previousValue.DIEMDANHSVs.Remove(this);
					}
					this._LICHHOC.Entity = value;
					if ((value != null))
					{
						value.DIEMDANHSVs.Add(this);
						this._IDLICHHOC = value.IDLICHHOC;
						this._IDLOPMH = value.IDLOPMH;
						this._IDSINHVIEN = value.IDSINHVIEN;
					}
					else
					{
						this._IDLICHHOC = default(int);
						this._IDLOPMH = default(int);
						this._IDSINHVIEN = default(int);
					}
					this.SendPropertyChanged("LICHHOC");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GIANGVIEN")]
	public partial class GIANGVIEN : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDGIANGVIEN;
		
		private string _MAGIANGVIEN;
		
		private string _TENGIANGVIEN;
		
		private System.Nullable<System.DateTime> _NGAYSINH;
		
		private string _EMAIL;
		
		private string _DIACHI;
		
		private string _SODIENTHOAI;
		
		private int _IDPHANQUYEN;
		
		private int _IDDANGNHAP;
		
		private EntitySet<LOPMONHOC> _LOPMONHOCs;
		
		private EntityRef<CHITIETDANGNHAP> _CHITIETDANGNHAP;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDGIANGVIENChanging(int value);
    partial void OnIDGIANGVIENChanged();
    partial void OnMAGIANGVIENChanging(string value);
    partial void OnMAGIANGVIENChanged();
    partial void OnTENGIANGVIENChanging(string value);
    partial void OnTENGIANGVIENChanged();
    partial void OnNGAYSINHChanging(System.Nullable<System.DateTime> value);
    partial void OnNGAYSINHChanged();
    partial void OnEMAILChanging(string value);
    partial void OnEMAILChanged();
    partial void OnDIACHIChanging(string value);
    partial void OnDIACHIChanged();
    partial void OnSODIENTHOAIChanging(string value);
    partial void OnSODIENTHOAIChanged();
    partial void OnIDPHANQUYENChanging(int value);
    partial void OnIDPHANQUYENChanged();
    partial void OnIDDANGNHAPChanging(int value);
    partial void OnIDDANGNHAPChanged();
    #endregion
		
		public GIANGVIEN()
		{
			this._LOPMONHOCs = new EntitySet<LOPMONHOC>(new Action<LOPMONHOC>(this.attach_LOPMONHOCs), new Action<LOPMONHOC>(this.detach_LOPMONHOCs));
			this._CHITIETDANGNHAP = default(EntityRef<CHITIETDANGNHAP>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDGIANGVIEN", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDGIANGVIEN
		{
			get
			{
				return this._IDGIANGVIEN;
			}
			set
			{
				if ((this._IDGIANGVIEN != value))
				{
					this.OnIDGIANGVIENChanging(value);
					this.SendPropertyChanging();
					this._IDGIANGVIEN = value;
					this.SendPropertyChanged("IDGIANGVIEN");
					this.OnIDGIANGVIENChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MAGIANGVIEN", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string MAGIANGVIEN
		{
			get
			{
				return this._MAGIANGVIEN;
			}
			set
			{
				if ((this._MAGIANGVIEN != value))
				{
					this.OnMAGIANGVIENChanging(value);
					this.SendPropertyChanging();
					this._MAGIANGVIEN = value;
					this.SendPropertyChanged("MAGIANGVIEN");
					this.OnMAGIANGVIENChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TENGIANGVIEN", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string TENGIANGVIEN
		{
			get
			{
				return this._TENGIANGVIEN;
			}
			set
			{
				if ((this._TENGIANGVIEN != value))
				{
					this.OnTENGIANGVIENChanging(value);
					this.SendPropertyChanging();
					this._TENGIANGVIEN = value;
					this.SendPropertyChanged("TENGIANGVIEN");
					this.OnTENGIANGVIENChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NGAYSINH", DbType="DateTime")]
		public System.Nullable<System.DateTime> NGAYSINH
		{
			get
			{
				return this._NGAYSINH;
			}
			set
			{
				if ((this._NGAYSINH != value))
				{
					this.OnNGAYSINHChanging(value);
					this.SendPropertyChanging();
					this._NGAYSINH = value;
					this.SendPropertyChanged("NGAYSINH");
					this.OnNGAYSINHChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EMAIL", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string EMAIL
		{
			get
			{
				return this._EMAIL;
			}
			set
			{
				if ((this._EMAIL != value))
				{
					this.OnEMAILChanging(value);
					this.SendPropertyChanging();
					this._EMAIL = value;
					this.SendPropertyChanged("EMAIL");
					this.OnEMAILChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DIACHI", DbType="NVarChar(1)")]
		public string DIACHI
		{
			get
			{
				return this._DIACHI;
			}
			set
			{
				if ((this._DIACHI != value))
				{
					this.OnDIACHIChanging(value);
					this.SendPropertyChanging();
					this._DIACHI = value;
					this.SendPropertyChanged("DIACHI");
					this.OnDIACHIChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SODIENTHOAI", DbType="VarChar(10)")]
		public string SODIENTHOAI
		{
			get
			{
				return this._SODIENTHOAI;
			}
			set
			{
				if ((this._SODIENTHOAI != value))
				{
					this.OnSODIENTHOAIChanging(value);
					this.SendPropertyChanging();
					this._SODIENTHOAI = value;
					this.SendPropertyChanged("SODIENTHOAI");
					this.OnSODIENTHOAIChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDPHANQUYEN", DbType="Int NOT NULL")]
		public int IDPHANQUYEN
		{
			get
			{
				return this._IDPHANQUYEN;
			}
			set
			{
				if ((this._IDPHANQUYEN != value))
				{
					if (this._CHITIETDANGNHAP.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDPHANQUYENChanging(value);
					this.SendPropertyChanging();
					this._IDPHANQUYEN = value;
					this.SendPropertyChanged("IDPHANQUYEN");
					this.OnIDPHANQUYENChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDDANGNHAP", DbType="Int NOT NULL")]
		public int IDDANGNHAP
		{
			get
			{
				return this._IDDANGNHAP;
			}
			set
			{
				if ((this._IDDANGNHAP != value))
				{
					if (this._CHITIETDANGNHAP.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDDANGNHAPChanging(value);
					this.SendPropertyChanging();
					this._IDDANGNHAP = value;
					this.SendPropertyChanged("IDDANGNHAP");
					this.OnIDDANGNHAPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GIANGVIEN_LOPMONHOC", Storage="_LOPMONHOCs", ThisKey="IDGIANGVIEN", OtherKey="IDGIANGVIEN")]
		public EntitySet<LOPMONHOC> LOPMONHOCs
		{
			get
			{
				return this._LOPMONHOCs;
			}
			set
			{
				this._LOPMONHOCs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CHITIETDANGNHAP_GIANGVIEN", Storage="_CHITIETDANGNHAP", ThisKey="IDPHANQUYEN,IDDANGNHAP", OtherKey="IDPHANQUYEN,IDDANGNHAP", IsForeignKey=true)]
		public CHITIETDANGNHAP CHITIETDANGNHAP
		{
			get
			{
				return this._CHITIETDANGNHAP.Entity;
			}
			set
			{
				CHITIETDANGNHAP previousValue = this._CHITIETDANGNHAP.Entity;
				if (((previousValue != value) 
							|| (this._CHITIETDANGNHAP.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CHITIETDANGNHAP.Entity = null;
						previousValue.GIANGVIENs.Remove(this);
					}
					this._CHITIETDANGNHAP.Entity = value;
					if ((value != null))
					{
						value.GIANGVIENs.Add(this);
						this._IDPHANQUYEN = value.IDPHANQUYEN;
						this._IDDANGNHAP = value.IDDANGNHAP;
					}
					else
					{
						this._IDPHANQUYEN = default(int);
						this._IDDANGNHAP = default(int);
					}
					this.SendPropertyChanged("CHITIETDANGNHAP");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LOPMONHOCs(LOPMONHOC entity)
		{
			this.SendPropertyChanging();
			entity.GIANGVIEN = this;
		}
		
		private void detach_LOPMONHOCs(LOPMONHOC entity)
		{
			this.SendPropertyChanging();
			entity.GIANGVIEN = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.HOCKY")]
	public partial class HOCKY : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDHOCKY;
		
		private string _MAHOCKY;
		
		private string _TENHOCKY;
		
		private int _IDNAMHOC;
		
		private EntitySet<LOPMONHOC> _LOPMONHOCs;
		
		private EntityRef<NAMHOC> _NAMHOC;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDHOCKYChanging(int value);
    partial void OnIDHOCKYChanged();
    partial void OnMAHOCKYChanging(string value);
    partial void OnMAHOCKYChanged();
    partial void OnTENHOCKYChanging(string value);
    partial void OnTENHOCKYChanged();
    partial void OnIDNAMHOCChanging(int value);
    partial void OnIDNAMHOCChanged();
    #endregion
		
		public HOCKY()
		{
			this._LOPMONHOCs = new EntitySet<LOPMONHOC>(new Action<LOPMONHOC>(this.attach_LOPMONHOCs), new Action<LOPMONHOC>(this.detach_LOPMONHOCs));
			this._NAMHOC = default(EntityRef<NAMHOC>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDHOCKY", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDHOCKY
		{
			get
			{
				return this._IDHOCKY;
			}
			set
			{
				if ((this._IDHOCKY != value))
				{
					this.OnIDHOCKYChanging(value);
					this.SendPropertyChanging();
					this._IDHOCKY = value;
					this.SendPropertyChanged("IDHOCKY");
					this.OnIDHOCKYChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MAHOCKY", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string MAHOCKY
		{
			get
			{
				return this._MAHOCKY;
			}
			set
			{
				if ((this._MAHOCKY != value))
				{
					this.OnMAHOCKYChanging(value);
					this.SendPropertyChanging();
					this._MAHOCKY = value;
					this.SendPropertyChanged("MAHOCKY");
					this.OnMAHOCKYChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TENHOCKY", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string TENHOCKY
		{
			get
			{
				return this._TENHOCKY;
			}
			set
			{
				if ((this._TENHOCKY != value))
				{
					this.OnTENHOCKYChanging(value);
					this.SendPropertyChanging();
					this._TENHOCKY = value;
					this.SendPropertyChanged("TENHOCKY");
					this.OnTENHOCKYChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDNAMHOC", DbType="Int NOT NULL")]
		public int IDNAMHOC
		{
			get
			{
				return this._IDNAMHOC;
			}
			set
			{
				if ((this._IDNAMHOC != value))
				{
					if (this._NAMHOC.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDNAMHOCChanging(value);
					this.SendPropertyChanging();
					this._IDNAMHOC = value;
					this.SendPropertyChanged("IDNAMHOC");
					this.OnIDNAMHOCChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="HOCKY_LOPMONHOC", Storage="_LOPMONHOCs", ThisKey="IDHOCKY", OtherKey="IDHOCKY")]
		public EntitySet<LOPMONHOC> LOPMONHOCs
		{
			get
			{
				return this._LOPMONHOCs;
			}
			set
			{
				this._LOPMONHOCs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NAMHOC_HOCKY", Storage="_NAMHOC", ThisKey="IDNAMHOC", OtherKey="IDNAMHOC", IsForeignKey=true)]
		public NAMHOC NAMHOC
		{
			get
			{
				return this._NAMHOC.Entity;
			}
			set
			{
				NAMHOC previousValue = this._NAMHOC.Entity;
				if (((previousValue != value) 
							|| (this._NAMHOC.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._NAMHOC.Entity = null;
						previousValue.HOCKies.Remove(this);
					}
					this._NAMHOC.Entity = value;
					if ((value != null))
					{
						value.HOCKies.Add(this);
						this._IDNAMHOC = value.IDNAMHOC;
					}
					else
					{
						this._IDNAMHOC = default(int);
					}
					this.SendPropertyChanged("NAMHOC");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LOPMONHOCs(LOPMONHOC entity)
		{
			this.SendPropertyChanging();
			entity.HOCKY = this;
		}
		
		private void detach_LOPMONHOCs(LOPMONHOC entity)
		{
			this.SendPropertyChanging();
			entity.HOCKY = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LICHHOC")]
	public partial class LICHHOC : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDLICHHOC;
		
		private System.DateTime _THOIGIANDIEMDANH;
		
		private int _TUANHOC;
		
		private string _MAQR;
		
		private int _IDLOPMH;
		
		private int _IDSINHVIEN;
		
		private EntitySet<DIEMDANHSV> _DIEMDANHSVs;
		
		private EntityRef<DANHSACHLOP> _DANHSACHLOP;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDLICHHOCChanging(int value);
    partial void OnIDLICHHOCChanged();
    partial void OnTHOIGIANDIEMDANHChanging(System.DateTime value);
    partial void OnTHOIGIANDIEMDANHChanged();
    partial void OnTUANHOCChanging(int value);
    partial void OnTUANHOCChanged();
    partial void OnMAQRChanging(string value);
    partial void OnMAQRChanged();
    partial void OnIDLOPMHChanging(int value);
    partial void OnIDLOPMHChanged();
    partial void OnIDSINHVIENChanging(int value);
    partial void OnIDSINHVIENChanged();
    #endregion
		
		public LICHHOC()
		{
			this._DIEMDANHSVs = new EntitySet<DIEMDANHSV>(new Action<DIEMDANHSV>(this.attach_DIEMDANHSVs), new Action<DIEMDANHSV>(this.detach_DIEMDANHSVs));
			this._DANHSACHLOP = default(EntityRef<DANHSACHLOP>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDLICHHOC", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDLICHHOC
		{
			get
			{
				return this._IDLICHHOC;
			}
			set
			{
				if ((this._IDLICHHOC != value))
				{
					this.OnIDLICHHOCChanging(value);
					this.SendPropertyChanging();
					this._IDLICHHOC = value;
					this.SendPropertyChanged("IDLICHHOC");
					this.OnIDLICHHOCChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_THOIGIANDIEMDANH", DbType="DateTime NOT NULL")]
		public System.DateTime THOIGIANDIEMDANH
		{
			get
			{
				return this._THOIGIANDIEMDANH;
			}
			set
			{
				if ((this._THOIGIANDIEMDANH != value))
				{
					this.OnTHOIGIANDIEMDANHChanging(value);
					this.SendPropertyChanging();
					this._THOIGIANDIEMDANH = value;
					this.SendPropertyChanged("THOIGIANDIEMDANH");
					this.OnTHOIGIANDIEMDANHChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TUANHOC", DbType="Int NOT NULL")]
		public int TUANHOC
		{
			get
			{
				return this._TUANHOC;
			}
			set
			{
				if ((this._TUANHOC != value))
				{
					this.OnTUANHOCChanging(value);
					this.SendPropertyChanging();
					this._TUANHOC = value;
					this.SendPropertyChanged("TUANHOC");
					this.OnTUANHOCChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MAQR", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string MAQR
		{
			get
			{
				return this._MAQR;
			}
			set
			{
				if ((this._MAQR != value))
				{
					this.OnMAQRChanging(value);
					this.SendPropertyChanging();
					this._MAQR = value;
					this.SendPropertyChanged("MAQR");
					this.OnMAQRChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDLOPMH", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IDLOPMH
		{
			get
			{
				return this._IDLOPMH;
			}
			set
			{
				if ((this._IDLOPMH != value))
				{
					if (this._DANHSACHLOP.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDLOPMHChanging(value);
					this.SendPropertyChanging();
					this._IDLOPMH = value;
					this.SendPropertyChanged("IDLOPMH");
					this.OnIDLOPMHChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDSINHVIEN", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IDSINHVIEN
		{
			get
			{
				return this._IDSINHVIEN;
			}
			set
			{
				if ((this._IDSINHVIEN != value))
				{
					if (this._DANHSACHLOP.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDSINHVIENChanging(value);
					this.SendPropertyChanging();
					this._IDSINHVIEN = value;
					this.SendPropertyChanged("IDSINHVIEN");
					this.OnIDSINHVIENChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LICHHOC_DIEMDANHSV", Storage="_DIEMDANHSVs", ThisKey="IDLICHHOC,IDLOPMH,IDSINHVIEN", OtherKey="IDLICHHOC,IDLOPMH,IDSINHVIEN")]
		public EntitySet<DIEMDANHSV> DIEMDANHSVs
		{
			get
			{
				return this._DIEMDANHSVs;
			}
			set
			{
				this._DIEMDANHSVs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DANHSACHLOP_LICHHOC", Storage="_DANHSACHLOP", ThisKey="IDLOPMH,IDSINHVIEN", OtherKey="IDLOPMH,IDSINHVIEN", IsForeignKey=true)]
		public DANHSACHLOP DANHSACHLOP
		{
			get
			{
				return this._DANHSACHLOP.Entity;
			}
			set
			{
				DANHSACHLOP previousValue = this._DANHSACHLOP.Entity;
				if (((previousValue != value) 
							|| (this._DANHSACHLOP.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DANHSACHLOP.Entity = null;
						previousValue.LICHHOCs.Remove(this);
					}
					this._DANHSACHLOP.Entity = value;
					if ((value != null))
					{
						value.LICHHOCs.Add(this);
						this._IDLOPMH = value.IDLOPMH;
						this._IDSINHVIEN = value.IDSINHVIEN;
					}
					else
					{
						this._IDLOPMH = default(int);
						this._IDSINHVIEN = default(int);
					}
					this.SendPropertyChanged("DANHSACHLOP");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DIEMDANHSVs(DIEMDANHSV entity)
		{
			this.SendPropertyChanging();
			entity.LICHHOC = this;
		}
		
		private void detach_DIEMDANHSVs(DIEMDANHSV entity)
		{
			this.SendPropertyChanging();
			entity.LICHHOC = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LOPMONHOC")]
	public partial class LOPMONHOC : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDLOPMH;
		
		private string _MALOPMH;
		
		private string _TENLOPMH;
		
		private int _NHOMMONHOC;
		
		private bool _TOTHUCHANH;
		
		private string _THU;
		
		private System.Nullable<int> _SOTIET;
		
		private System.Nullable<int> _TIETBATDAU;
		
		private System.DateTime _NGAYBATDAU;
		
		private System.DateTime _NGAYKETTHUC;
		
		private string _PHONGHOC;
		
		private int _IDGIANGVIEN;
		
		private int _IDMONHOC;
		
		private int _IDHOCKY;
		
		private EntitySet<DANHSACHLOP> _DANHSACHLOPs;
		
		private EntityRef<GIANGVIEN> _GIANGVIEN;
		
		private EntityRef<HOCKY> _HOCKY;
		
		private EntityRef<MONHOC> _MONHOC;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDLOPMHChanging(int value);
    partial void OnIDLOPMHChanged();
    partial void OnMALOPMHChanging(string value);
    partial void OnMALOPMHChanged();
    partial void OnTENLOPMHChanging(string value);
    partial void OnTENLOPMHChanged();
    partial void OnNHOMMONHOCChanging(int value);
    partial void OnNHOMMONHOCChanged();
    partial void OnTOTHUCHANHChanging(bool value);
    partial void OnTOTHUCHANHChanged();
    partial void OnTHUChanging(string value);
    partial void OnTHUChanged();
    partial void OnSOTIETChanging(System.Nullable<int> value);
    partial void OnSOTIETChanged();
    partial void OnTIETBATDAUChanging(System.Nullable<int> value);
    partial void OnTIETBATDAUChanged();
    partial void OnNGAYBATDAUChanging(System.DateTime value);
    partial void OnNGAYBATDAUChanged();
    partial void OnNGAYKETTHUCChanging(System.DateTime value);
    partial void OnNGAYKETTHUCChanged();
    partial void OnPHONGHOCChanging(string value);
    partial void OnPHONGHOCChanged();
    partial void OnIDGIANGVIENChanging(int value);
    partial void OnIDGIANGVIENChanged();
    partial void OnIDMONHOCChanging(int value);
    partial void OnIDMONHOCChanged();
    partial void OnIDHOCKYChanging(int value);
    partial void OnIDHOCKYChanged();
    #endregion
		
		public LOPMONHOC()
		{
			this._DANHSACHLOPs = new EntitySet<DANHSACHLOP>(new Action<DANHSACHLOP>(this.attach_DANHSACHLOPs), new Action<DANHSACHLOP>(this.detach_DANHSACHLOPs));
			this._GIANGVIEN = default(EntityRef<GIANGVIEN>);
			this._HOCKY = default(EntityRef<HOCKY>);
			this._MONHOC = default(EntityRef<MONHOC>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDLOPMH", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDLOPMH
		{
			get
			{
				return this._IDLOPMH;
			}
			set
			{
				if ((this._IDLOPMH != value))
				{
					this.OnIDLOPMHChanging(value);
					this.SendPropertyChanging();
					this._IDLOPMH = value;
					this.SendPropertyChanged("IDLOPMH");
					this.OnIDLOPMHChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MALOPMH", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string MALOPMH
		{
			get
			{
				return this._MALOPMH;
			}
			set
			{
				if ((this._MALOPMH != value))
				{
					this.OnMALOPMHChanging(value);
					this.SendPropertyChanging();
					this._MALOPMH = value;
					this.SendPropertyChanged("MALOPMH");
					this.OnMALOPMHChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TENLOPMH", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string TENLOPMH
		{
			get
			{
				return this._TENLOPMH;
			}
			set
			{
				if ((this._TENLOPMH != value))
				{
					this.OnTENLOPMHChanging(value);
					this.SendPropertyChanging();
					this._TENLOPMH = value;
					this.SendPropertyChanged("TENLOPMH");
					this.OnTENLOPMHChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NHOMMONHOC", DbType="Int NOT NULL")]
		public int NHOMMONHOC
		{
			get
			{
				return this._NHOMMONHOC;
			}
			set
			{
				if ((this._NHOMMONHOC != value))
				{
					this.OnNHOMMONHOCChanging(value);
					this.SendPropertyChanging();
					this._NHOMMONHOC = value;
					this.SendPropertyChanged("NHOMMONHOC");
					this.OnNHOMMONHOCChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TOTHUCHANH", DbType="Bit NOT NULL")]
		public bool TOTHUCHANH
		{
			get
			{
				return this._TOTHUCHANH;
			}
			set
			{
				if ((this._TOTHUCHANH != value))
				{
					this.OnTOTHUCHANHChanging(value);
					this.SendPropertyChanging();
					this._TOTHUCHANH = value;
					this.SendPropertyChanged("TOTHUCHANH");
					this.OnTOTHUCHANHChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_THU", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string THU
		{
			get
			{
				return this._THU;
			}
			set
			{
				if ((this._THU != value))
				{
					this.OnTHUChanging(value);
					this.SendPropertyChanging();
					this._THU = value;
					this.SendPropertyChanged("THU");
					this.OnTHUChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SOTIET", DbType="Int")]
		public System.Nullable<int> SOTIET
		{
			get
			{
				return this._SOTIET;
			}
			set
			{
				if ((this._SOTIET != value))
				{
					this.OnSOTIETChanging(value);
					this.SendPropertyChanging();
					this._SOTIET = value;
					this.SendPropertyChanged("SOTIET");
					this.OnSOTIETChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TIETBATDAU", DbType="Int")]
		public System.Nullable<int> TIETBATDAU
		{
			get
			{
				return this._TIETBATDAU;
			}
			set
			{
				if ((this._TIETBATDAU != value))
				{
					this.OnTIETBATDAUChanging(value);
					this.SendPropertyChanging();
					this._TIETBATDAU = value;
					this.SendPropertyChanged("TIETBATDAU");
					this.OnTIETBATDAUChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NGAYBATDAU", DbType="DateTime NOT NULL")]
		public System.DateTime NGAYBATDAU
		{
			get
			{
				return this._NGAYBATDAU;
			}
			set
			{
				if ((this._NGAYBATDAU != value))
				{
					this.OnNGAYBATDAUChanging(value);
					this.SendPropertyChanging();
					this._NGAYBATDAU = value;
					this.SendPropertyChanged("NGAYBATDAU");
					this.OnNGAYBATDAUChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NGAYKETTHUC", DbType="DateTime NOT NULL")]
		public System.DateTime NGAYKETTHUC
		{
			get
			{
				return this._NGAYKETTHUC;
			}
			set
			{
				if ((this._NGAYKETTHUC != value))
				{
					this.OnNGAYKETTHUCChanging(value);
					this.SendPropertyChanging();
					this._NGAYKETTHUC = value;
					this.SendPropertyChanged("NGAYKETTHUC");
					this.OnNGAYKETTHUCChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PHONGHOC", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string PHONGHOC
		{
			get
			{
				return this._PHONGHOC;
			}
			set
			{
				if ((this._PHONGHOC != value))
				{
					this.OnPHONGHOCChanging(value);
					this.SendPropertyChanging();
					this._PHONGHOC = value;
					this.SendPropertyChanged("PHONGHOC");
					this.OnPHONGHOCChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDGIANGVIEN", DbType="Int NOT NULL")]
		public int IDGIANGVIEN
		{
			get
			{
				return this._IDGIANGVIEN;
			}
			set
			{
				if ((this._IDGIANGVIEN != value))
				{
					if (this._GIANGVIEN.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDGIANGVIENChanging(value);
					this.SendPropertyChanging();
					this._IDGIANGVIEN = value;
					this.SendPropertyChanged("IDGIANGVIEN");
					this.OnIDGIANGVIENChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDMONHOC", DbType="Int NOT NULL")]
		public int IDMONHOC
		{
			get
			{
				return this._IDMONHOC;
			}
			set
			{
				if ((this._IDMONHOC != value))
				{
					if (this._MONHOC.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDMONHOCChanging(value);
					this.SendPropertyChanging();
					this._IDMONHOC = value;
					this.SendPropertyChanged("IDMONHOC");
					this.OnIDMONHOCChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDHOCKY", DbType="Int NOT NULL")]
		public int IDHOCKY
		{
			get
			{
				return this._IDHOCKY;
			}
			set
			{
				if ((this._IDHOCKY != value))
				{
					if (this._HOCKY.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDHOCKYChanging(value);
					this.SendPropertyChanging();
					this._IDHOCKY = value;
					this.SendPropertyChanged("IDHOCKY");
					this.OnIDHOCKYChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LOPMONHOC_DANHSACHLOP", Storage="_DANHSACHLOPs", ThisKey="IDLOPMH", OtherKey="IDLOPMH")]
		public EntitySet<DANHSACHLOP> DANHSACHLOPs
		{
			get
			{
				return this._DANHSACHLOPs;
			}
			set
			{
				this._DANHSACHLOPs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GIANGVIEN_LOPMONHOC", Storage="_GIANGVIEN", ThisKey="IDGIANGVIEN", OtherKey="IDGIANGVIEN", IsForeignKey=true)]
		public GIANGVIEN GIANGVIEN
		{
			get
			{
				return this._GIANGVIEN.Entity;
			}
			set
			{
				GIANGVIEN previousValue = this._GIANGVIEN.Entity;
				if (((previousValue != value) 
							|| (this._GIANGVIEN.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GIANGVIEN.Entity = null;
						previousValue.LOPMONHOCs.Remove(this);
					}
					this._GIANGVIEN.Entity = value;
					if ((value != null))
					{
						value.LOPMONHOCs.Add(this);
						this._IDGIANGVIEN = value.IDGIANGVIEN;
					}
					else
					{
						this._IDGIANGVIEN = default(int);
					}
					this.SendPropertyChanged("GIANGVIEN");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="HOCKY_LOPMONHOC", Storage="_HOCKY", ThisKey="IDHOCKY", OtherKey="IDHOCKY", IsForeignKey=true)]
		public HOCKY HOCKY
		{
			get
			{
				return this._HOCKY.Entity;
			}
			set
			{
				HOCKY previousValue = this._HOCKY.Entity;
				if (((previousValue != value) 
							|| (this._HOCKY.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._HOCKY.Entity = null;
						previousValue.LOPMONHOCs.Remove(this);
					}
					this._HOCKY.Entity = value;
					if ((value != null))
					{
						value.LOPMONHOCs.Add(this);
						this._IDHOCKY = value.IDHOCKY;
					}
					else
					{
						this._IDHOCKY = default(int);
					}
					this.SendPropertyChanged("HOCKY");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MONHOC_LOPMONHOC", Storage="_MONHOC", ThisKey="IDMONHOC", OtherKey="IDMONHOC", IsForeignKey=true)]
		public MONHOC MONHOC
		{
			get
			{
				return this._MONHOC.Entity;
			}
			set
			{
				MONHOC previousValue = this._MONHOC.Entity;
				if (((previousValue != value) 
							|| (this._MONHOC.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MONHOC.Entity = null;
						previousValue.LOPMONHOCs.Remove(this);
					}
					this._MONHOC.Entity = value;
					if ((value != null))
					{
						value.LOPMONHOCs.Add(this);
						this._IDMONHOC = value.IDMONHOC;
					}
					else
					{
						this._IDMONHOC = default(int);
					}
					this.SendPropertyChanged("MONHOC");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DANHSACHLOPs(DANHSACHLOP entity)
		{
			this.SendPropertyChanging();
			entity.LOPMONHOC = this;
		}
		
		private void detach_DANHSACHLOPs(DANHSACHLOP entity)
		{
			this.SendPropertyChanging();
			entity.LOPMONHOC = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LOPSINHVIEN")]
	public partial class LOPSINHVIEN : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDLOPSINHVIEN;
		
		private string _MALOPSV;
		
		private string _TENLOPSV;
		
		private EntitySet<SINHVIEN> _SINHVIENs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDLOPSINHVIENChanging(int value);
    partial void OnIDLOPSINHVIENChanged();
    partial void OnMALOPSVChanging(string value);
    partial void OnMALOPSVChanged();
    partial void OnTENLOPSVChanging(string value);
    partial void OnTENLOPSVChanged();
    #endregion
		
		public LOPSINHVIEN()
		{
			this._SINHVIENs = new EntitySet<SINHVIEN>(new Action<SINHVIEN>(this.attach_SINHVIENs), new Action<SINHVIEN>(this.detach_SINHVIENs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDLOPSINHVIEN", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDLOPSINHVIEN
		{
			get
			{
				return this._IDLOPSINHVIEN;
			}
			set
			{
				if ((this._IDLOPSINHVIEN != value))
				{
					this.OnIDLOPSINHVIENChanging(value);
					this.SendPropertyChanging();
					this._IDLOPSINHVIEN = value;
					this.SendPropertyChanged("IDLOPSINHVIEN");
					this.OnIDLOPSINHVIENChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MALOPSV", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string MALOPSV
		{
			get
			{
				return this._MALOPSV;
			}
			set
			{
				if ((this._MALOPSV != value))
				{
					this.OnMALOPSVChanging(value);
					this.SendPropertyChanging();
					this._MALOPSV = value;
					this.SendPropertyChanged("MALOPSV");
					this.OnMALOPSVChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TENLOPSV", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string TENLOPSV
		{
			get
			{
				return this._TENLOPSV;
			}
			set
			{
				if ((this._TENLOPSV != value))
				{
					this.OnTENLOPSVChanging(value);
					this.SendPropertyChanging();
					this._TENLOPSV = value;
					this.SendPropertyChanged("TENLOPSV");
					this.OnTENLOPSVChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LOPSINHVIEN_SINHVIEN", Storage="_SINHVIENs", ThisKey="IDLOPSINHVIEN", OtherKey="IDLOPSINHVIEN")]
		public EntitySet<SINHVIEN> SINHVIENs
		{
			get
			{
				return this._SINHVIENs;
			}
			set
			{
				this._SINHVIENs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SINHVIENs(SINHVIEN entity)
		{
			this.SendPropertyChanging();
			entity.LOPSINHVIEN = this;
		}
		
		private void detach_SINHVIENs(SINHVIEN entity)
		{
			this.SendPropertyChanging();
			entity.LOPSINHVIEN = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MONHOC")]
	public partial class MONHOC : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDMONHOC;
		
		private string _MAMONHOC;
		
		private string _TENMONHOC;
		
		private System.Nullable<int> _SOBUOI;
		
		private System.Nullable<double> _SOTINCHI;
		
		private EntitySet<LOPMONHOC> _LOPMONHOCs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDMONHOCChanging(int value);
    partial void OnIDMONHOCChanged();
    partial void OnMAMONHOCChanging(string value);
    partial void OnMAMONHOCChanged();
    partial void OnTENMONHOCChanging(string value);
    partial void OnTENMONHOCChanged();
    partial void OnSOBUOIChanging(System.Nullable<int> value);
    partial void OnSOBUOIChanged();
    partial void OnSOTINCHIChanging(System.Nullable<double> value);
    partial void OnSOTINCHIChanged();
    #endregion
		
		public MONHOC()
		{
			this._LOPMONHOCs = new EntitySet<LOPMONHOC>(new Action<LOPMONHOC>(this.attach_LOPMONHOCs), new Action<LOPMONHOC>(this.detach_LOPMONHOCs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDMONHOC", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDMONHOC
		{
			get
			{
				return this._IDMONHOC;
			}
			set
			{
				if ((this._IDMONHOC != value))
				{
					this.OnIDMONHOCChanging(value);
					this.SendPropertyChanging();
					this._IDMONHOC = value;
					this.SendPropertyChanged("IDMONHOC");
					this.OnIDMONHOCChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MAMONHOC", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string MAMONHOC
		{
			get
			{
				return this._MAMONHOC;
			}
			set
			{
				if ((this._MAMONHOC != value))
				{
					this.OnMAMONHOCChanging(value);
					this.SendPropertyChanging();
					this._MAMONHOC = value;
					this.SendPropertyChanged("MAMONHOC");
					this.OnMAMONHOCChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TENMONHOC", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string TENMONHOC
		{
			get
			{
				return this._TENMONHOC;
			}
			set
			{
				if ((this._TENMONHOC != value))
				{
					this.OnTENMONHOCChanging(value);
					this.SendPropertyChanging();
					this._TENMONHOC = value;
					this.SendPropertyChanged("TENMONHOC");
					this.OnTENMONHOCChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SOBUOI", DbType="Int")]
		public System.Nullable<int> SOBUOI
		{
			get
			{
				return this._SOBUOI;
			}
			set
			{
				if ((this._SOBUOI != value))
				{
					this.OnSOBUOIChanging(value);
					this.SendPropertyChanging();
					this._SOBUOI = value;
					this.SendPropertyChanged("SOBUOI");
					this.OnSOBUOIChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SOTINCHI", DbType="Float")]
		public System.Nullable<double> SOTINCHI
		{
			get
			{
				return this._SOTINCHI;
			}
			set
			{
				if ((this._SOTINCHI != value))
				{
					this.OnSOTINCHIChanging(value);
					this.SendPropertyChanging();
					this._SOTINCHI = value;
					this.SendPropertyChanged("SOTINCHI");
					this.OnSOTINCHIChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MONHOC_LOPMONHOC", Storage="_LOPMONHOCs", ThisKey="IDMONHOC", OtherKey="IDMONHOC")]
		public EntitySet<LOPMONHOC> LOPMONHOCs
		{
			get
			{
				return this._LOPMONHOCs;
			}
			set
			{
				this._LOPMONHOCs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LOPMONHOCs(LOPMONHOC entity)
		{
			this.SendPropertyChanging();
			entity.MONHOC = this;
		}
		
		private void detach_LOPMONHOCs(LOPMONHOC entity)
		{
			this.SendPropertyChanging();
			entity.MONHOC = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.NAMHOC")]
	public partial class NAMHOC : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDNAMHOC;
		
		private string _MANAMHOC;
		
		private string _TENNAMHOC;
		
		private EntitySet<HOCKY> _HOCKies;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDNAMHOCChanging(int value);
    partial void OnIDNAMHOCChanged();
    partial void OnMANAMHOCChanging(string value);
    partial void OnMANAMHOCChanged();
    partial void OnTENNAMHOCChanging(string value);
    partial void OnTENNAMHOCChanged();
    #endregion
		
		public NAMHOC()
		{
			this._HOCKies = new EntitySet<HOCKY>(new Action<HOCKY>(this.attach_HOCKies), new Action<HOCKY>(this.detach_HOCKies));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDNAMHOC", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDNAMHOC
		{
			get
			{
				return this._IDNAMHOC;
			}
			set
			{
				if ((this._IDNAMHOC != value))
				{
					this.OnIDNAMHOCChanging(value);
					this.SendPropertyChanging();
					this._IDNAMHOC = value;
					this.SendPropertyChanged("IDNAMHOC");
					this.OnIDNAMHOCChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MANAMHOC", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string MANAMHOC
		{
			get
			{
				return this._MANAMHOC;
			}
			set
			{
				if ((this._MANAMHOC != value))
				{
					this.OnMANAMHOCChanging(value);
					this.SendPropertyChanging();
					this._MANAMHOC = value;
					this.SendPropertyChanged("MANAMHOC");
					this.OnMANAMHOCChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TENNAMHOC", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string TENNAMHOC
		{
			get
			{
				return this._TENNAMHOC;
			}
			set
			{
				if ((this._TENNAMHOC != value))
				{
					this.OnTENNAMHOCChanging(value);
					this.SendPropertyChanging();
					this._TENNAMHOC = value;
					this.SendPropertyChanged("TENNAMHOC");
					this.OnTENNAMHOCChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NAMHOC_HOCKY", Storage="_HOCKies", ThisKey="IDNAMHOC", OtherKey="IDNAMHOC")]
		public EntitySet<HOCKY> HOCKies
		{
			get
			{
				return this._HOCKies;
			}
			set
			{
				this._HOCKies.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_HOCKies(HOCKY entity)
		{
			this.SendPropertyChanging();
			entity.NAMHOC = this;
		}
		
		private void detach_HOCKies(HOCKY entity)
		{
			this.SendPropertyChanging();
			entity.NAMHOC = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PHANQUYEN")]
	public partial class PHANQUYEN : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDPHANQUYEN;
		
		private string _TENQUYEN;
		
		private EntitySet<CHITIETDANGNHAP> _CHITIETDANGNHAPs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDPHANQUYENChanging(int value);
    partial void OnIDPHANQUYENChanged();
    partial void OnTENQUYENChanging(string value);
    partial void OnTENQUYENChanged();
    #endregion
		
		public PHANQUYEN()
		{
			this._CHITIETDANGNHAPs = new EntitySet<CHITIETDANGNHAP>(new Action<CHITIETDANGNHAP>(this.attach_CHITIETDANGNHAPs), new Action<CHITIETDANGNHAP>(this.detach_CHITIETDANGNHAPs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDPHANQUYEN", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDPHANQUYEN
		{
			get
			{
				return this._IDPHANQUYEN;
			}
			set
			{
				if ((this._IDPHANQUYEN != value))
				{
					this.OnIDPHANQUYENChanging(value);
					this.SendPropertyChanging();
					this._IDPHANQUYEN = value;
					this.SendPropertyChanged("IDPHANQUYEN");
					this.OnIDPHANQUYENChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TENQUYEN", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string TENQUYEN
		{
			get
			{
				return this._TENQUYEN;
			}
			set
			{
				if ((this._TENQUYEN != value))
				{
					this.OnTENQUYENChanging(value);
					this.SendPropertyChanging();
					this._TENQUYEN = value;
					this.SendPropertyChanged("TENQUYEN");
					this.OnTENQUYENChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PHANQUYEN_CHITIETDANGNHAP", Storage="_CHITIETDANGNHAPs", ThisKey="IDPHANQUYEN", OtherKey="IDPHANQUYEN")]
		public EntitySet<CHITIETDANGNHAP> CHITIETDANGNHAPs
		{
			get
			{
				return this._CHITIETDANGNHAPs;
			}
			set
			{
				this._CHITIETDANGNHAPs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CHITIETDANGNHAPs(CHITIETDANGNHAP entity)
		{
			this.SendPropertyChanging();
			entity.PHANQUYEN = this;
		}
		
		private void detach_CHITIETDANGNHAPs(CHITIETDANGNHAP entity)
		{
			this.SendPropertyChanging();
			entity.PHANQUYEN = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.QUANTRIVIEN")]
	public partial class QUANTRIVIEN : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDQTV;
		
		private string _MAQTV;
		
		private string _TENQTV;
		
		private bool _TRANGTHAI;
		
		private bool _PHANQUYENQTV;
		
		private int _IDPHANQUYEN;
		
		private int _IDDANGNHAP;
		
		private EntityRef<CHITIETDANGNHAP> _CHITIETDANGNHAP;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDQTVChanging(int value);
    partial void OnIDQTVChanged();
    partial void OnMAQTVChanging(string value);
    partial void OnMAQTVChanged();
    partial void OnTENQTVChanging(string value);
    partial void OnTENQTVChanged();
    partial void OnTRANGTHAIChanging(bool value);
    partial void OnTRANGTHAIChanged();
    partial void OnPHANQUYENQTVChanging(bool value);
    partial void OnPHANQUYENQTVChanged();
    partial void OnIDPHANQUYENChanging(int value);
    partial void OnIDPHANQUYENChanged();
    partial void OnIDDANGNHAPChanging(int value);
    partial void OnIDDANGNHAPChanged();
    #endregion
		
		public QUANTRIVIEN()
		{
			this._CHITIETDANGNHAP = default(EntityRef<CHITIETDANGNHAP>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDQTV", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDQTV
		{
			get
			{
				return this._IDQTV;
			}
			set
			{
				if ((this._IDQTV != value))
				{
					this.OnIDQTVChanging(value);
					this.SendPropertyChanging();
					this._IDQTV = value;
					this.SendPropertyChanged("IDQTV");
					this.OnIDQTVChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MAQTV", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string MAQTV
		{
			get
			{
				return this._MAQTV;
			}
			set
			{
				if ((this._MAQTV != value))
				{
					this.OnMAQTVChanging(value);
					this.SendPropertyChanging();
					this._MAQTV = value;
					this.SendPropertyChanged("MAQTV");
					this.OnMAQTVChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TENQTV", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string TENQTV
		{
			get
			{
				return this._TENQTV;
			}
			set
			{
				if ((this._TENQTV != value))
				{
					this.OnTENQTVChanging(value);
					this.SendPropertyChanging();
					this._TENQTV = value;
					this.SendPropertyChanged("TENQTV");
					this.OnTENQTVChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TRANGTHAI", DbType="Bit NOT NULL")]
		public bool TRANGTHAI
		{
			get
			{
				return this._TRANGTHAI;
			}
			set
			{
				if ((this._TRANGTHAI != value))
				{
					this.OnTRANGTHAIChanging(value);
					this.SendPropertyChanging();
					this._TRANGTHAI = value;
					this.SendPropertyChanged("TRANGTHAI");
					this.OnTRANGTHAIChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PHANQUYENQTV", DbType="Bit NOT NULL")]
		public bool PHANQUYENQTV
		{
			get
			{
				return this._PHANQUYENQTV;
			}
			set
			{
				if ((this._PHANQUYENQTV != value))
				{
					this.OnPHANQUYENQTVChanging(value);
					this.SendPropertyChanging();
					this._PHANQUYENQTV = value;
					this.SendPropertyChanged("PHANQUYENQTV");
					this.OnPHANQUYENQTVChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDPHANQUYEN", DbType="Int NOT NULL")]
		public int IDPHANQUYEN
		{
			get
			{
				return this._IDPHANQUYEN;
			}
			set
			{
				if ((this._IDPHANQUYEN != value))
				{
					if (this._CHITIETDANGNHAP.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDPHANQUYENChanging(value);
					this.SendPropertyChanging();
					this._IDPHANQUYEN = value;
					this.SendPropertyChanged("IDPHANQUYEN");
					this.OnIDPHANQUYENChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDDANGNHAP", DbType="Int NOT NULL")]
		public int IDDANGNHAP
		{
			get
			{
				return this._IDDANGNHAP;
			}
			set
			{
				if ((this._IDDANGNHAP != value))
				{
					if (this._CHITIETDANGNHAP.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDDANGNHAPChanging(value);
					this.SendPropertyChanging();
					this._IDDANGNHAP = value;
					this.SendPropertyChanged("IDDANGNHAP");
					this.OnIDDANGNHAPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CHITIETDANGNHAP_QUANTRIVIEN", Storage="_CHITIETDANGNHAP", ThisKey="IDPHANQUYEN,IDDANGNHAP", OtherKey="IDPHANQUYEN,IDDANGNHAP", IsForeignKey=true)]
		public CHITIETDANGNHAP CHITIETDANGNHAP
		{
			get
			{
				return this._CHITIETDANGNHAP.Entity;
			}
			set
			{
				CHITIETDANGNHAP previousValue = this._CHITIETDANGNHAP.Entity;
				if (((previousValue != value) 
							|| (this._CHITIETDANGNHAP.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CHITIETDANGNHAP.Entity = null;
						previousValue.QUANTRIVIENs.Remove(this);
					}
					this._CHITIETDANGNHAP.Entity = value;
					if ((value != null))
					{
						value.QUANTRIVIENs.Add(this);
						this._IDPHANQUYEN = value.IDPHANQUYEN;
						this._IDDANGNHAP = value.IDDANGNHAP;
					}
					else
					{
						this._IDPHANQUYEN = default(int);
						this._IDDANGNHAP = default(int);
					}
					this.SendPropertyChanged("CHITIETDANGNHAP");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
